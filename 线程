#include<pthread.h>
函数pthread_join用来等待一个线程的结束,线程间同步的操作.头文件:#include<pthread.h>
函数定义:int pthread_join(pthread_t thread, void **retval);
   描述:pthread_join()函数,是以阻塞的方式等待thread指定的线程结束.当函数返回时,被等待线程的资源被回收.如果线程已经结束,
那么函数会立即返回.并且thread指定的线程必须是joinable的.
   参数: thread:线程标识符,即线程ID,标识唯一线程. retval:用户定义的指针,用来存储被等待线程的返回值.
   返回值:0代表返回值.失败,返回的是错误号.

线程的创建:
int pthread_creat(pthread_t *restric tipd,const pthread_attr_t *restrict attr, void *(*func)(void*), void *restrict arg);

attr:线程属性包括:优先级/初始化大小,缺省值是NULL;
tidp是要创建的线程,创建成功后tipd为线程id

void *(*func)(void*)是一个函数指针,该指针的类型是void* (*)(void*)是一个参数为void*,返回追也为void*的函数类型.
void *thread_handler(void *arg)
{
 return NULL; 
}

void *restrict arg
中的arg是void*(*func)(void* )函数指针的参数.

例子:
#include<pthread.h>
#include<stdlib.h>
#include<unistd.h>
#include<stdio.h>
void *thread_function(void *arg)
{
    int i;
    for(i=0;i<8;i++)
    {
        printf("Thread working...! %d \n",i);
        sleep(1);
    }
    return NULL;
}

int main(void)
{
    pthread_t mythread;
    if (pthread_create(&mythread,NULL,thread_function,NULL))
    {
        printf("error creating thread.");
        abort();
    }
    if(pthread_join(mythread,NULL))
    {
        printf("error join thread.");
        abort();
    }
        printf("thread done! \n");
    exit(0);
}

pthread函数阻塞程序继续运行,等待线程结束,如果线程没有阻塞,则直接运行printf("thread done!");这一行命令.

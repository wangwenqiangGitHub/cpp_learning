困扰我最深的问题：指针和地址
单独的概念都明白，可能是理解的不深入，导致应用的时候常常迷糊。其实就是用的少
指针其实是地址；从定义来看，int* p；p就是地址也就是指针，并不是*P才是指针，*P表示指向的地址


C++的形参大致可以分为三种，传值，传指针，传引用。

传值，不改变原来函数外变量的值，原来是几还是几，只是copy一个副本，副本在变而已。

传指针，等于把原来函数外变量的内存地址传进来，那么操作的其实就是对应地址上的数据，那么任何操作就会影响函数外相应变量的值，并改变他。

传引用，其实和指针类似，虽然传的不是地址，但是对函数的变量操作完了



C++的形参可以是数组，但是返回值不能是数组


传指针实例

void fun(int *x)
{
*x += 5; //修改的是指针x指向的内存单元值
}
void main(void){
int y = 0;
fun(&y);
cout<<<<\"y = \"<<y<<endl; //y = 5;
}：

传引用：
void fun(int &x){
x += 5; //修改的是x引用的对象值 &x = y;
}
void main(void){
int y = 0;
fun(y);
cout<<<<\"y = \"<<y<<endl; //y = 5;
}

  void init_iot_comm(ros::NodeHandle *nh)
    {
      m_route_path_sub = nh->subscribe(SUBSCRIBE_MQTT_TOPIC, SUBSCRIBE_QUEUE_BUF_LEN, route_path_callback);
    }
    
  C++中变量是对象的时候用.访问
  C++中变量是指针的时候用箭头访问
  例如：
#inlclude <iostream>
using namespace std;
 
class A
{
    public:
       int x;
       int y;  
};
 
 
int main()
{
      A a;
      a.x=100;        //对象用点访问
      // a->y=100;     //error
      A* pa = new A;
      pa->y=200;      //对象指针用箭头
     // pa.x=100;     //error<br>　　　　delete pa;
      return 0;
}


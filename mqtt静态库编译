下载工程源码:
#git clone https://github.com/eclipse/paho.mqtt.c.git
创建build编译目录:
# cd paho.mqtt.c
# mkdir build

生成编译环境编译mqttt库
# cmake .. -DPAHO_BUILD_STATIC=TRUE -DCMAKE_C_COMPILER=/opt/arm-2014.05/bin/arm-none-linux-gnueabi-gcc
# make
..  表示CMakeLists.txt所在的相对路径
-DPAHO_BUILD_STATIC=TRUE 表示生成静态库，不需要可以不加，默认为FALSE。
-DCMAKE_C_COMPILER=xxx 表示指定交叉编译工具链的绝对路径。
若编译linux版本的库只需 cmake .. 即可，无需指定编译工具路径。
make 执行完成后，在build/src目录下即可找到编译生成的库文件，如下图所示


动态库和静态库编译:
    在源码文件夹下:src/
    动态库:
        g++ -fPIC -static -o libjson2pgm.a *.cpp -std=c++11
     静态库:
        g++ -c *.cpp -std=c++11
        ar -cr libjson2pgm.a *.o

静态库编译
https://www.cnblogs.com/zjiaxing/p/5557629.html

SSL问题:
https://github.com/eclipse/paho.mqtt.c

编译库时需要开启SSL,
mkdir /tmp/build.paho
cd /tmp/build.paho
cmake -GNinja -DPAHO_WITH_SSL=TRUE -DPAHO_BUILD_DOCUMENTATION=TRUE -DPAHO_BUILD_SAMPLES=TRUE ~/git/org.eclipse.paho.mqtt.c
-DPAHO_WITH_SSL=TRUE表示开启SSL功能.
具体代码实现:
全局:static MQTTClient_SSLOptions connectSSLOptions;

conectOptions.ssl = &connectSSLOptions;
connectSSLOptions= MQTTClient_SSLOptions_initializer;
connectSSLOptions.trustStore = "/home/nvidia/mqtt_ca.pem";
connectSSLOptions.verify = 0;

打印log的.
init()
{
  MQTTClient_setTraceCallback(trace_callback);
  MQTTClient_setTraceLevel(level:MQTTCLIENT_TRACE_PROTOCOL);
  ......
  ......
}
上位机软件的使用
